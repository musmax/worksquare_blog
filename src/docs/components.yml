components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        gender:
          type: string
        phoneNumber:
          type: string
        profileImage:
          type: string
        isVerified:
          type: string
        role:
          type: string
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        firstName: John
        lastName: Doe
        middleName: J
        phoneNumber: 12345678
        gender: male
        address: jeyse
        profileImage: http://profileimage.jpg
        isVerified: true
        role: user
       
      
    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z

    Variable:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      example:
        id: 2343953
        name: username

    MessageTemplate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        emailSubject:
          type: string
        emailBody:
          type: string
        smsSubject:
          type: string
        smsBody:
          type: string
      example:
        title: Welcome Email
        description: Welcome email to new users
        emailSubject: Welcome to the platform
        emailBody: Hello {{username}}, welcome to the platform
        smsSubject: Welcome to the platform
        smsBody: Hello {{username}}, welcome to the platform

    Role:
      type: object
      properties:
        title:
          type: string
          required: true
        description:
          type: string
          required: true
        permissions:
          type: array
          items:
            type: integer
            required: true
      example:
        title: Admin
        description: All admin
        permissions: [1, 2, 3]

    Permission:
      type: object
      properties:
        name:
          type: string
          required: true
        value:
          type: string
          required: true
        groupName:
          type: string
          required: true
        description:
          type: string
          required: true
      example:
        name: Manage Users
        value: users.manage
        groupName: Users Permission
        description: Permission to create, delete and modify users

    Blog:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
      example:
        id: 5
        title: Software Engineer
        content: Software Engineer at Google


    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Messages:
      type: object
      properties:
        message:
          type: string
        submissionId:
          type: string
        receiverId:
          type: string
      example:
        message: Please reupload your document
        submissionId: 5ebac534954b54139806c112
        receiverId: 5ebac534954b54139806c112
    
    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

            
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
